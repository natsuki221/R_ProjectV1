demo()
install.packages("geojasonio")
install.packages("ggplot2")
#  注意 !  配合台北市網站開放資料的GeoJson 格式變更，請改用2_1_v01.R 或 2_1_v021.R
####### 繪製台北市界地圖解法一###################
library(geojsonio)  # 載入處理GeoJSON資料套件
####### 繪製台北市界地圖解法一###################
library(tibble)
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
print(geojson.sp@data[c('COUNTYSN','COUNTYNAME')]) # 列印縣市代碼對照
twn.map <- tidy( # 將sp物件轉換為data.frame物件
sp.taipei,  # 資料對象
region = "COUNTYSN" # 群(group)欄位的依據
)
g <- ggplot(  # 使用繪圖函式產生繪圖物件
data=twn.map,  # 符合data.frame格式的繪圖資料
mapping=aes(   # 指定data 的欄位
x = long,  # x軸為經度
y = lat    # y軸為緯度
)) +
labs(title='台北市縣界地圖(解方一)')+
geom_path(show.legend=FALSE)  # 繪出座標路徑線
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
####### 繪製台北市界地圖解法一###################
library(tibble)
library(geojsonio)  # 載入處理GeoJSON資料套件
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
print(geojson.sp@data[c('COUNTYSN','COUNTYNAME')]) # 列印縣市代碼對照
sp.taipei <- geojson.sp[  # 過濾geojson.sp(SpatialPolygonsDataFrame 物件) 的臺北市資料
geojson.sp@data$COUNTYNAME  %in% c('台北市'),
]
library(broom) # 載入轉換tibble(data.frame 的擴充物件)資料套件
twn.map <- tidy( # 將sp物件轉換為data.frame物件
sp.taipei,  # 資料對象
region = "COUNTYSN" # 群(group)欄位的依據
)
library(ggplot2) # 載入繪圖套件
g <- ggplot(  # 使用繪圖函式產生繪圖物件
data=twn.map,  # 符合data.frame格式的繪圖資料
mapping=aes(   # 指定data 的欄位
x = long,  # x軸為經度
y = lat    # y軸為緯度
)) +
labs(title='台北市縣界地圖(解方一)')+
geom_path(show.legend=FALSE)  # 繪出座標路徑線
print(g) # 印出台北縣市界地圖
####### 繪製台北市界地圖解法二###################
library(rgdal) # 載入rgdal套件讀取shp地圖資料
twn.shp <- rgdal::readOGR( # 回傳Spatial class 之物件
dsn='data/mapdata201911261001', # 目前工作目錄下(或路徑)圖資目錄
use_iconv = TRUE, # 依據encoding參數給予內碼轉碼
encoding='UTF-8'  # 轉為UTF-8 內碼
)
####### 繪製台北市界地圖解法一###################
library(tibble)
library(geojsonio)  # 載入處理GeoJSON資料套件
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
print(geojson.sp@data[c('COUNTYSN','COUNTYNAME')]) # 列印縣市代碼對照
sp.taipei <- geojson.sp[  # 過濾geojson.sp(SpatialPolygonsDataFrame 物件) 的臺北市資料
geojson.sp@data$COUNTYNAME  %in% c('台北市'),
]
library(broom) # 載入轉換tibble(data.frame 的擴充物件)資料套件
twn.map <- tidy( # 將sp物件轉換為data.frame物件
sp.taipei,  # 資料對象
region = "COUNTYSN" # 群(group)欄位的依據
)
library(ggplot2) # 載入繪圖套件
g <- ggplot(  # 使用繪圖函式產生繪圖物件
data=twn.map,  # 符合data.frame格式的繪圖資料
mapping=aes(   # 指定data 的欄位
x = long,  # x軸為經度
y = lat    # y軸為緯度
)) +
labs(title='台北市縣界地圖(解方一)')+
geom_path(show.legend=FALSE)  # 繪出座標路徑線
print(g) # 印出台北縣市界地圖
####### 繪製台北市界地圖解法二###################
library(rgdal) # 載入rgdal套件讀取shp地圖資料
twn.shp <- rgdal::readOGR( # 回傳Spatial class 之物件
dsn='data/mapdata201911261001', # 目前工作目錄下(或路徑)圖資目錄
use_iconv = TRUE, # 依據encoding參數給予內碼轉碼
encoding='UTF-8'  # 轉為UTF-8 內碼
)
source("~/Desktop/Work/R-Project/R/2_1_v01.R", echo=TRUE)
source("~/Desktop/Work/R-Project/R/2_1_v01.R", echo=TRUE)
library(tibble)
####### 繪製台北市界地圖解法一###################
library(tibble)
library(geojsonio)  # 載入處理GeoJSON資料套件
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
####### 繪製台北市界地圖解法一###################
library(tibble)
library(geojsonio)  # 載入處理GeoJSON資料套件
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
####### 繪製台北市界地圖解法一###################
library(tibble)
library(geojsonio)  # 載入處理GeoJSON資料套件
geojson.sp <- geojson_read( # 將下載之縣市GeoJSON圖資讀入變數
x= 'https://raw.githubusercontent.com/g0v/twgeojson/master/json/twCounty2010.geo.json',
what = "sp" # 指定回傳Spatial class 之物件
)
setwd('/Users/lintzujeng/Documents/GitHub/R_Project/merge')
library("tidyverse")
library("openxlsx")
odf <- read.xlsx('orange_market.xlsx')
weather <- read.csv('weather.csv', header = T)
odf$id <- c(1:length(odf$日期))
weather$平均 <- NULL
weather[6,] <- NA
weather2 <- weather[-6,]
library("reshape2")
weather.long <- melt(weather2, id.vars = "年.月")
weather.long.ordered <- weather.long[order(weather.long$年.月, weather.long$variable),]
weather.long.ordered$id <- c(1:length(weather.long.ordered$年.月))
odf.sep <- separate(odf, col = 日期, sep = "年", into = c("年", "月"))
View(odf.sep)
View(weather2)
library("longitudinalData")
data <- iris # 使用 R 內建的資料。
stack_data <- stack(data) # stack 函數將各行資料排成一直行，unstack 則是還原成未 stack 之前形態。
data <- artificialJointLongData # 此種資料稱作為縱向資料(Longitudinal Data)，通常是單一物體重複測量值所產生的資料，記錄方式可以用長型資料(long format)或寬型資料(wide format)。
data_long = reshape(data, direction="long", varying = list(c("v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8", "v9", "v10"), c("w0", "w1", "w2", "w3", "w4", "w5", "w6", "w7", "w8", "w9", "w10"), c("x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10")), v.names = c("v", "w", "x"), idvar = "id") # 利用 reshape 函數將資料從 wide 轉成 long
data_wide = reshape(data_long, direction="wide",v.names = c("v", "w", "x"), idvar = "id") # 利用 reshape 函數將資料從 long 轉成 wide
library("longitudinalData")
install.packages(longitudinalData)
install.packages("longitudinalData")
library("longitudinalData")
library(longitudinalData)
remove.packages("longitudinalData")
install.packages("longitudinalData")
library(longitudinalData)
library(rgl)
detach("package:rgl", unload = TRUE)
library(rgl)
removeComment("rgl")
remove.packages("rgl")
install.packages("rgl")
library("rgl")
source("~/Documents/GitHub/R_Project/merge/merge_app.R", echo=TRUE)
install.packages("reshape2")
install.packages("reshape2")
View(weather)
source("~/Documents/GitHub/R_Project/merge/merge_app.R", echo=TRUE)
View(weather)
View(weather2)
weather3 <- stack(weather2)
View(weather3)
?stack
weather3 <- cbind(weather2)
View(weather3)
View(weather3)
stack
View(weather3)
weather3 <- stack(weather2)
?melt
weather3(row.names)
weather3(row.names())
row.names(weather3)
row.names(weather2)
names(weather2)
weather <- read.csv('weather.csv', header = F, row.names = "年.月")
setwd('/Users/lintzujeng/Documents/GitHub/R_Project/merge')
library("tidyverse")
library("openxlsx")
odf <- read.xlsx('orange_market.xlsx')
weather <- read.csv('weather.csv', header = F, row.names = "年.月")
weather <- read.csv('weather.csv', header = T, row.names = "年.月")
View(weather)
